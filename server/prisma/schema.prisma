generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String?       @unique
  username     String        @unique
  password     String?       @default("")
  discordId    String?       @unique
  avatar       String?       @default("/default-pfp.jpg")
  coins        Int           @default(5000000)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  blockedBy    BlockedUser[] @relation("BlockedByUser")
  blockedUsers BlockedUser[] @relation("UserBlocked")
  friendsOf    Friend[]      @relation("FriendsOfUser")
  friends      Friend[]      @relation("UserFriends")
  gamesCreated Game[]        @relation("GameCreator")
  gamesPlayed  GamePlayer[]
  stats        UserStats?
}

model Game {
  id                  String        @id @default(cuid())
  creatorId           String
  status              GameStatus    @default(WAITING)
  gameMode            GameMode
  bidType             BidType
  specialRules        SpecialRule[]
  minPoints           Int
  maxPoints           Int
  buyIn               Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  solo                Boolean       @default(false)
  whiz                Boolean       @default(false)
  mirror              Boolean       @default(false)
  gimmick             Boolean       @default(false)
  screamer            Boolean       @default(false)
  assassin            Boolean       @default(false)
  rated               Boolean?      @default(false)
  completed           Boolean?      @default(false)
  cancelled           Boolean?      @default(false)
  finalScore          Int?
  winner              Int?
  gameType            String?       @default("REGULAR")
  specialRulesApplied SpecialRule[]
  league              Boolean?      @default(false)
  creator             User          @relation("GameCreator", fields: [creatorId], references: [id])
  players             GamePlayer[]
  gameResult          GameResult?
  rounds              Round[]
}

model GamePlayer {
  id          String   @id @default(cuid())
  gameId      String
  userId      String
  position    Int
  team        Int?
  bid         Int?
  bags        Int      @default(0)
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  finalScore  Int?
  finalBags   Int?
  finalPoints Int?
  won         Boolean?
  game        Game     @relation(fields: [gameId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([gameId, position])
}

model Round {
  id          String   @id @default(cuid())
  gameId      String
  roundNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  game        Game     @relation(fields: [gameId], references: [id])
  tricks      Trick[]

  @@unique([gameId, roundNumber])
}

model Trick {
  id              String   @id @default(cuid())
  roundId         String
  leadPlayerId    String
  winningPlayerId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  cards           Card[]
  round           Round    @relation(fields: [roundId], references: [id])
}

model Card {
  id        String   @id @default(cuid())
  trickId   String
  playerId  String
  suit      Suit
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trick     Trick    @relation(fields: [trickId], references: [id])
}

model UserStats {
  id                  String   @id @default(cuid())
  userId              String   @unique
  gamesPlayed         Int      @default(0)
  gamesWon            Int      @default(0)
  nilsBid             Int      @default(0)
  nilsMade            Int      @default(0)
  blindNilsBid        Int      @default(0)
  blindNilsMade       Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  totalBags           Int      @default(0)
  bagsPerGame         Float    @default(0)
  partnersGamesPlayed Int?     @default(0)
  partnersGamesWon    Int?     @default(0)
  partnersTotalBags   Int?     @default(0)
  partnersBagsPerGame Float?   @default(0)
  soloGamesPlayed     Int?     @default(0)
  soloGamesWon        Int?     @default(0)
  soloTotalBags       Int?     @default(0)
  soloBagsPerGame     Float?   @default(0)
  totalCoinsWon       Int?     @default(0)
  totalCoinsLost      Int?     @default(0)
  netCoins            Int?     @default(0)
  user                User     @relation(fields: [userId], references: [id])
}

model GameResult {
  id            String   @id @default(cuid())
  gameId        String   @unique
  winner        Int
  finalScore    Int
  gameDuration  Int?
  team1Score    Int?
  team2Score    Int?
  playerResults Json
  totalRounds   Int
  totalTricks   Int
  specialEvents Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  game          Game     @relation(fields: [gameId], references: [id])
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friend    User     @relation("FriendsOfUser", fields: [friendId], references: [id])
  user      User     @relation("UserFriends", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model BlockedUser {
  id        String   @id @default(cuid())
  userId    String
  blockedId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blocked   User     @relation("BlockedByUser", fields: [blockedId], references: [id])
  user      User     @relation("UserBlocked", fields: [userId], references: [id])

  @@unique([userId, blockedId])
}

enum GameStatus {
  WAITING
  PLAYING
  FINISHED
  CANCELLED
}

enum GameMode {
  PARTNERS
  SOLO
}

enum BidType {
  REGULAR
  WHIZ
  MIRRORS
  GIMMICK
}

enum SpecialRule {
  SCREAMER
  ASSASSIN
}

enum Suit {
  SPADES
  HEARTS
  DIAMONDS
  CLUBS
}
