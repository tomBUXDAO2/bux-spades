generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlockedUser {
  id                               String   @id
  userId                           String
  blockedId                        String
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime
  User_BlockedUser_blockedIdToUser User     @relation("BlockedUser_blockedIdToUser", fields: [blockedId], references: [id])
  User_BlockedUser_userIdToUser    User     @relation("BlockedUser_userIdToUser", fields: [userId], references: [id])

  @@unique([userId, blockedId])
}

model Friend {
  id                         String   @id
  userId                     String
  friendId                   String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime
  User_Friend_friendIdToUser User     @relation("Friend_friendIdToUser", fields: [friendId], references: [id])
  User_Friend_userIdToUser   User     @relation("Friend_userIdToUser", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model Game {
  id            String        @id
  creatorId     String
  status        GameStatus    @default(WAITING)
  gameMode      GameMode
  bidType       BidType
  specialRules  SpecialRule[]
  minPoints     Int
  maxPoints     Int
  buyIn         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  rated         Boolean       @default(false)
  allowNil      Boolean       @default(true)
  allowBlindNil Boolean       @default(false)
  league        Boolean       @default(false)
  currentRound  Int?          @default(1)
  currentTrick  Int?          @default(1)
  currentPlayer String?
  dealer        Int?          @default(0)
  gameState     Json?
  lastActionAt  DateTime?     @default(now())
  // Additional fields needed by the code
  whiz          Boolean?      @default(false)
  mirror        Boolean?      @default(false)
  gimmick       Boolean?      @default(false)
  screamer      Boolean?      @default(false)
  assassin      Boolean?      @default(false)

  completed     Boolean?      @default(false)
  cancelled     Boolean?      @default(false)
  finalScore    Int?
  winner        Int?
  gameType      String?
  specialRulesApplied String[]
  User          User          @relation(fields: [creatorId], references: [id])
  GamePlayer    GamePlayer[]  @relation("GameToGamePlayer")
  GameResult    GameResult?
  Round         Round[]
}

model GamePlayer {
  id          String   @id @db.Text
  gameId      String  @db.Text
  userId      String  @db.Text
  position    Int
  team        Int?
  bid         Int?
  bags        Int      @default(0)
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  finalScore  Int?
  finalBags   Int?
  finalPoints Int?
  won         Boolean?
  discordId   String? @db.Text
  username    String? @db.Text
  tricksMade  Int?
  nilBid      Boolean? @default(false)
  blindNilBid Boolean? @default(false)
  Game        Game     @relation("GameToGamePlayer", fields: [gameId], references: [id])
  User        User     @relation("UserToGamePlayer", fields: [userId], references: [id])

  @@unique([gameId, position])
}

model Round {
  id          String   @id
  gameId      String
  roundNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Game        Game     @relation(fields: [gameId], references: [id])
  Trick       Trick[]
  bids        RoundBid[]

  @@unique([gameId, roundNumber])
}

model RoundBid {
  id        String   @id
  roundId   String
  playerId  String
  bid       Int
  createdAt DateTime @default(now())
  round     Round   @relation(fields: [roundId], references: [id])
  user      User    @relation(fields: [playerId], references: [id])

  @@unique([roundId, playerId])
}

model Trick {
  id              String   @id
  roundId         String
  leadPlayerId    String
  winningPlayerId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  trickNumber     Int
  Card            Card[]
  Round           Round    @relation(fields: [roundId], references: [id])

  @@unique([roundId, trickNumber])
}

model Card {
  id        String   @id
  trickId   String
  playerId  String
  suit      Suit
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  position  Int
  Trick     Trick    @relation(fields: [trickId], references: [id])
}

model User {
  id                                      String          @id
  email                                   String?         @unique
  username                                String          @unique
  password                                String?         @default("")
  discordId                               String?         @unique
  avatar                                  String?         @default("/default-pfp.jpg")
  coins                                   Int             @default(5000000)
  createdAt                               DateTime        @default(now())
  soundEnabled                            Boolean         @default(true)
  updatedAt                               DateTime
  BlockedUser_BlockedUser_blockedIdToUser BlockedUser[]   @relation("BlockedUser_blockedIdToUser")
  BlockedUser_BlockedUser_userIdToUser    BlockedUser[]   @relation("BlockedUser_userIdToUser")
  Friend_Friend_friendIdToUser            Friend[]        @relation("Friend_friendIdToUser")
  Friend_Friend_userIdToUser              Friend[]        @relation("Friend_userIdToUser")
  Game                                    Game[]
  GamePlayer                              GamePlayer[]    @relation("UserToGamePlayer")
  UserGameStats                           UserGameStats[]
  UserStats                               UserStats?
  RoundBid                                RoundBid[]
}

model UserStats {
  id                  String   @id
  userId              String   @unique
  gamesPlayed         Int      @default(0)
  gamesWon            Int      @default(0)
  nilsBid             Int      @default(0)
  nilsMade            Int      @default(0)
  blindNilsBid        Int      @default(0)
  blindNilsMade       Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  totalBags           Int      @default(0)
  bagsPerGame         Float    @default(0)
  totalTricksBid      Int      @default(0)
  totalTricksMade     Int      @default(0)
  totalNilBids        Int      @default(0)
  totalBlindNilBids   Int      @default(0)
  partnersGamesPlayed Int?     @default(0)
  partnersGamesWon    Int?     @default(0)
  partnersTotalBags   Int?     @default(0)
  partnersBagsPerGame Float?   @default(0)
  soloGamesPlayed     Int?     @default(0)
  soloGamesWon        Int?     @default(0)
  soloTotalBags       Int?     @default(0)
  soloBagsPerGame     Float?   @default(0)
  totalCoinsWon       Int?     @default(0)
  totalCoinsLost      Int?     @default(0)
  netCoins            Int?     @default(0)
  User                User     @relation(fields: [userId], references: [id])
}

model GameResult {
  id            String   @id
  gameId        String   @unique
  winner        Int
  finalScore    Int
  gameDuration  Int?
  team1Score    Int?
  team2Score    Int?
  playerResults Json
  totalRounds   Int
  totalTricks   Int
  specialEvents Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Game          Game     @relation(fields: [gameId], references: [id])
}

model UserGameStats {
  id            String       @id @default(uuid())
  userId        String
  gameMode      GameMode
  bidType       BidType
  gimmickType   GimmickType?
  screamer      Boolean      @default(false)
  assassin      Boolean      @default(false)
  gamesPlayed   Int          @default(0)
  gamesWon      Int          @default(0)
  nilsBid       Int          @default(0)
  nilsMade      Int          @default(0)
  blindNilsBid  Int          @default(0)
  blindNilsMade Int          @default(0)
  User          User         @relation(fields: [userId], references: [id])

  @@unique([userId, gameMode, bidType, gimmickType, screamer, assassin])
}

enum BidType {
  REGULAR
  WHIZ
  MIRRORS
  GIMMICK
}

enum GameMode {
  PARTNERS
  SOLO
}

enum GameStatus {
  WAITING
  BIDDING
  PLAYING
  FINISHED
  CANCELLED
}

enum SpecialRule {
  SCREAMER
  ASSASSIN
}

enum Suit {
  SPADES
  HEARTS
  DIAMONDS
  CLUBS
}

enum GimmickType {
  SUICIDE
  BID_4_OR_NIL
  BID_3
  BID_HEARTS
}
